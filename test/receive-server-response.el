(require 'tss)
(require 'el-expectations)
(require 'tenv)

(expectations
  (desc "receive-server-response get loaded")
  (expect t
    (let ((tfile (tenv-get-tmp-file "tss" "restest" nil t)))
      (with-current-buffer (find-file-noselect tfile)
        (erase-buffer)
        (insert "var s1;\n")
        (save-buffer)
        (tss--start-process)
        (setq tss--server-response nil)
        (setq tss--incomplete-server-response "")
        (setq tss--json-response-start-char "")
        (setq tss--json-response-end-char "")
        (tss--receive-server-response tss--proc (format "\"loaded %s\"\n" tfile))
        tss--server-response)))
  (desc "receive-server-response get content")
  (expect nil
    (let ((tfile (tenv-get-tmp-file "tss" "restest" nil t)))
      (with-current-buffer (find-file-noselect tfile)
        (setq tss--server-response nil)
        (setq tss--incomplete-server-response "")
        (setq tss--json-response-start-char "")
        (setq tss--json-response-end-char "")
        (tss--receive-server-response tss--proc "var s1;\n")
        tss--server-response)))
  (desc "receive-server-response get updated")
  (expect t
    (let ((tfile (tenv-get-tmp-file "tss" "restest" nil t)))
      (with-current-buffer (find-file-noselect tfile)
        (setq tss--server-response nil)
        (setq tss--incomplete-server-response "")
        (setq tss--json-response-start-char "")
        (setq tss--json-response-end-char "")
        (tss--receive-server-response tss--proc (format "var s1;\n\"updated %s\"" tfile))
        tss--server-response)))
  (desc "receive-server-response get tss response")
  (expect (mock (tss--handle-err-response))
    (let ((tfile (tenv-get-tmp-file "tss" "restest" nil t)))
      (with-current-buffer (find-file-noselect tfile)
        (setq tss--server-response nil)
        (setq tss--incomplete-server-response "")
        (setq tss--json-response-start-char "")
        (setq tss--json-response-end-char "")
        (tss--receive-server-response tss--proc "\"TSS closing\""))))
  (desc "receive-server-response get json")
  (expect '((b . :json-false) (a . t))
    (let ((tfile (tenv-get-tmp-file "tss" "restest" nil t)))
      (with-current-buffer (find-file-noselect tfile)
        (setq tss--server-response nil)
        (setq tss--incomplete-server-response "")
        (setq tss--json-response-start-char "{")
        (setq tss--json-response-end-char "}")
        (tss--receive-server-response tss--proc "{\"a\":true,\"b\":false}")
        tss--server-response)))
  (desc "receive-server-response get json not match format")
  (expect nil
    (let ((tfile (tenv-get-tmp-file "tss" "restest" nil t)))
      (with-current-buffer (find-file-noselect tfile)
        (setq tss--server-response nil)
        (setq tss--incomplete-server-response "")
        (setq tss--json-response-start-char "")
        (setq tss--json-response-end-char "")
        (tss--receive-server-response tss--proc "{\"a\":true,\"b\":false}")
        tss--server-response)))
  (desc "receive-server-response get json incomplete start")
  (expect nil
    (let ((tfile (tenv-get-tmp-file "tss" "restest" nil t)))
      (with-current-buffer (find-file-noselect tfile)
        (setq tss--server-response nil)
        (setq tss--incomplete-server-response "")
        (setq tss--json-response-start-char "{")
        (setq tss--json-response-end-char "}")
        (tss--receive-server-response tss--proc "{\"a\":true,\"b\":[")
        tss--server-response)))
  (desc "receive-server-response get json incomplete finished")
  (expect '((b . [((c . :json-false))]) (a . t))
    (let ((tfile (tenv-get-tmp-file "tss" "restest" nil t)))
      (with-current-buffer (find-file-noselect tfile)
        (tss--receive-server-response tss--proc "{\"c\":false}]}")
        tss--server-response)))
  )

