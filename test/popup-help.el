(require 'tss)
(require 'el-expectations)
(require 'tenv)

(expectations
  (desc "popup-help cmdstr")
  (expect t
    (tss--log-enable-logging)
    (tss--log-set-level 'trace)
    (tss--log-clear-log)
    (stub tss-run-flymake => nil)
    (stub tss--sync-server => t)
    (stub tss--active-p => t)
    (stub tss--get-process => nil)
    (stub process-send-string => nil)
    (stub popup-tip => nil)
    (let* ((tfile (tenv-get-tmp-file "tss" "popuptest" nil t)))
      (with-current-buffer (find-file-noselect tfile)
        (erase-buffer)
        (insert "var s1;\nvar s2;\n")
        (save-buffer)
        (goto-char (point-min))
        (search-forward "2" nil t)
        (tss-popup-help))
      (with-current-buffer (get-buffer " *log4e-tss*")
        (goto-char (point-max))
        (when (search-backward "cmdstr" nil t)
          (string= (buffer-substring-no-properties (point) (point-at-eol))
                   (concat "cmdstr[type 2 6 " tfile "] waitsec[nil]"))))))
  (desc "popup-help get")
  (expect (mock (popup-tip "Harness.ScriptInfo.version is PROPERTY.\n\nType: Number\n\nhogege\n"))
    (stub tss--sync-server => t)
    (stub tss--active-p => t)
    (stub tss--get-server-response => '((type . "number") (limChar . 1014) (minChar . 1007) (kind . "property") (fullSymbolName . "Harness.ScriptInfo.version") (docComment . "hogege") (memberName (text . "number") (suffix . "") (prefix . ""))))
    (let* ((tfile (tenv-get-tmp-file "tss" "popuptest" nil t)))
      (with-current-buffer (find-file-noselect tfile)
        (tss-popup-help))))
  )

