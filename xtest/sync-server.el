(require 'tss)
(require 'el-expectations)
(require 'tenv)

(expectations
  (desc "sync-server failed")
  (expect nil
    (tss--log-enable-logging)
    (tss--log-set-level 'trace)
    (tss--log-clear-log)
    (stub tss-run-flymake => nil)
    (stub tss--active-p => t)
    (stub tss--get-process => nil)
    (stub process-send-string => nil)
    (let* ((tfile (tenv-get-tmp-file "tss" "sync.ts" nil t))
           (ret (with-current-buffer (find-file-noselect tfile)
                  (erase-buffer)
                  (insert "var s1;\nvar s2;\n")
                  (tss--sync-server))))
      (save-buffer)
      ret))
  (desc "sync-server cmdstr")
  (expect t
    (let* ((tfile (tenv-get-tmp-file "tss" "sync.ts" nil t)))
      (with-current-buffer (get-buffer " *log4e-tss*")
        (goto-char (point-max))
        (when (search-backward "Start sync server" nil t)
          (string= (buffer-substring-no-properties (point) (point-at-eol))
                   (concat "Start sync server : update 2 " tfile))))))
  (desc "sync-server config about response")
  (expect t
    (let* ((tfile (tenv-get-tmp-file "tss" "sync.ts" nil t)))
      (with-current-buffer (find-file-noselect tfile)
        (and (string= tss--json-response-start-char "")
             (string= tss--json-response-end-char "")))))
  (desc "sync-server success")
  (expect t
    (stub tss-run-flymake => nil)
    (stub tss--active-p => t)
    (let* ((tfile (tenv-get-tmp-file "tss" "sync.ts" nil t))
           (ret (with-current-buffer (find-file-noselect tfile)
                  (tss--start-process)
                  (goto-char (point-max))
                  (insert "var s3;\n")
                  (tss--sync-server))))
      (save-buffer)
      ret))
  )
