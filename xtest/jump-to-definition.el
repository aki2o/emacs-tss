(require 'tss)
(require 'el-expectations)
(require 'tenv)

(expectations
  (desc "jump-to-definition cmdstr")
  (expect t
    (tss--log-enable-logging)
    (tss--log-set-level 'trace)
    (tss--log-clear-log)
    (stub tss-run-flymake => nil)
    (stub tss--sync-server => t)
    (stub tss--active-p => t)
    (stub tss--get-process => nil)
    (stub process-send-string => nil)
    (let* ((tfile (tenv-get-tmp-file "tss" "jumptest" nil t)))
      (with-current-buffer (find-file-noselect tfile)
        (erase-buffer)
        (insert "var s1;\nvar s2;\n")
        (save-buffer)
        (goto-char (point-min))
        (search-forward "2" nil t)
        (tss-jump-to-definition))
      (with-current-buffer (get-buffer " *log4e-tss*")
        (goto-char (point-max))
        (when (search-backward "cmdstr" nil t)
          (string= (buffer-substring-no-properties (point) (point-at-eol))
                   (concat "cmdstr[definition 2 7 " tfile "] waitsec[nil]"))))))
  (desc "jump-to-definition jump to exist file")
  (expect t
    (stub tss--sync-server => t)
    (stub tss--active-p => t)
    (stub tss--get-server-response => '((lim . [15 32]) (min . [2 5]) (file . "/tmp/.emacs.tenv.tss/jumptest") (def (containerName . "Harness.ScriptInfo") (containerKind . "") (name . "version") (kind . "property") (limChar . 548) (minChar . 525) (unitIndex . 2))))
    (let* ((tfile (tenv-get-tmp-file "tss" "jumptest" nil t)))
      (tss-jump-to-definition)
      (and (string= (buffer-file-name) tfile)
           (= (point) 13))))
  (desc "jump-to-definition jump to exist file for new format")
  (expect t
    (stub tss--sync-server => t)
    (stub tss--active-p => t)
    (stub tss--get-server-response => '((lim . ((character . 32) (line . 15))) (min . ((character . 5) (line . 2))) (file . "/tmp/.emacs.tenv.tss/jumptest") (def (containerName . "Harness.ScriptInfo") (containerKind . "") (name . "version") (kind . "property") (limChar . 548) (minChar . 525) (unitIndex . 2))))
    (let* ((tfile (tenv-get-tmp-file "tss" "jumptest" nil t)))
      (tss-jump-to-definition)
      (and (string= (buffer-file-name) tfile)
           (= (point) 13))))
  (desc "jump-to-definition not jump to not exist file")
  (expect t
    (stub tss--sync-server => t)
    (stub tss--active-p => t)
    (stub tss--get-server-response => '((lim . [15 32]) (min . [2 5]) (file . "/tmp/.emacs.tenv.tss/jumptest") (def (containerName . "Harness.ScriptInfo") (containerKind . "") (name . "version") (kind . "property") (limChar . 548) (minChar . 525) (unitIndex . 2))))
    (let* ((tfile (tenv-get-tmp-file "tss" "jumptest" nil t)))
      (loop for buff in (buffer-list)
            if (string= (buffer-file-name buff) tfile)
            do (kill-buffer buff))
      (delete-file tfile)
      (tss-jump-to-definition)
      (not (string= (buffer-file-name) tfile))))
  (desc "jump-to-definition jump to not exist point")
  (expect t
    (stub tss-run-flymake => nil)
    (stub tss--sync-server => t)
    (stub tss--active-p => t)
    (stub tss--get-server-response => '((lim . [15 32]) (min . [2 5]) (file . "/tmp/.emacs.tenv.tss/jumptest") (def (containerName . "Harness.ScriptInfo") (containerKind . "") (name . "version") (kind . "property") (limChar . 548) (minChar . 525) (unitIndex . 2))))
    (let* ((tfile (tenv-get-tmp-file "tss" "jumptest" nil t)))
      (with-current-buffer (find-file-noselect tfile)
        (insert "var s1;\n")
        (save-buffer))
      (tss-jump-to-definition)
      (and (string= (buffer-file-name) tfile)
           (= (point) (point-max)))))
  )

